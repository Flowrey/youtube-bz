"""
This type stub file was generated by pyright.
"""

from collections.abc import Mapping, Sequence
from typing import List, Optional, Union

from pytube import Caption, Stream
from pytube.helpers import deprecated

"""This module provides a query interface for media streams and captions."""

class StreamQuery(Sequence):
    """Interface for querying the available media streams."""

    def __init__(self, fmt_streams) -> None:
        """Construct a :class:`StreamQuery <StreamQuery>`.

        param list fmt_streams:
            list of :class:`Stream <Stream>` instances.
        """
        ...
    def filter(
        self,
        fps=...,
        res=...,
        resolution=...,
        mime_type=...,
        type=...,
        subtype=...,
        file_extension=...,
        abr=...,
        bitrate=...,
        video_codec=...,
        audio_codec=...,
        only_audio=...,
        only_video=...,
        progressive=...,
        adaptive=...,
        is_dash=...,
        custom_filter_functions=...,
    ) -> StreamQuery:  # -> StreamQuery:
        """Apply the given filtering criterion.

        :param fps:
            (optional) The frames per second.
        :type fps:
            int or None

        :param resolution:
            (optional) Alias to ``res``.
        :type res:
            str or None

        :param res:
            (optional) The video resolution.
        :type resolution:
            str or None

        :param mime_type:
            (optional) Two-part identifier for file formats and format contents
            composed of a "type", a "subtype".
        :type mime_type:
            str or None

        :param type:
            (optional) Type part of the ``mime_type`` (e.g.: audio, video).
        :type type:
            str or None

        :param subtype:
            (optional) Sub-type part of the ``mime_type`` (e.g.: mp4, mov).
        :type subtype:
            str or None

        :param file_extension:
            (optional) Alias to ``sub_type``.
        :type file_extension:
            str or None

        :param abr:
            (optional) Average bitrate (ABR) refers to the average amount of
            data transferred per unit of time (e.g.: 64kbps, 192kbps).
        :type abr:
            str or None

        :param bitrate:
            (optional) Alias to ``abr``.
        :type bitrate:
            str or None

        :param video_codec:
            (optional) Video compression format.
        :type video_codec:
            str or None

        :param audio_codec:
            (optional) Audio compression format.
        :type audio_codec:
            str or None

        :param bool progressive:
            Excludes adaptive streams (one file contains both audio and video
            tracks).

        :param bool adaptive:
            Excludes progressive streams (audio and video are on separate
            tracks).

        :param bool is_dash:
            Include/exclude dash streams.

        :param bool only_audio:
            Excludes streams with video tracks.

        :param bool only_video:
            Excludes streams with audio tracks.

        :param custom_filter_functions:
            (optional) Interface for defining complex filters without
            subclassing.
        :type custom_filter_functions:
            list or None

        """
        ...
    def order_by(self, attribute_name: str) -> StreamQuery:
        """Apply a sort order. Filters out stream the do not have the attribute.

        :param str attribute_name:
            The name of the attribute to sort by.
        """
        ...
    def desc(self) -> StreamQuery:
        """Sort streams in descending order.

        :rtype: :class:`StreamQuery <StreamQuery>`

        """
        ...
    def asc(self) -> StreamQuery:
        """Sort streams in ascending order.

        :rtype: :class:`StreamQuery <StreamQuery>`

        """
        ...
    def get_by_itag(self, itag: int) -> Optional[Stream]:
        """Get the corresponding :class:`Stream <Stream>` for a given itag.

        :param int itag:
            YouTube format identifier code.
        :rtype: :class:`Stream <Stream>` or None
        :returns:
            The :class:`Stream <Stream>` matching the given itag or None if
            not found.

        """
        ...
    def get_by_resolution(self, resolution: str) -> Optional[Stream]:
        """Get the corresponding :class:`Stream <Stream>` for a given resolution.

        Stream must be a progressive mp4.

        :param str resolution:
            Video resolution i.e. "720p", "480p", "360p", "240p", "144p"
        :rtype: :class:`Stream <Stream>` or None
        :returns:
            The :class:`Stream <Stream>` matching the given itag or None if
            not found.

        """
        ...
    def get_lowest_resolution(self) -> Optional[Stream]:
        """Get lowest resolution stream that is a progressive mp4.

        :rtype: :class:`Stream <Stream>` or None
        :returns:
            The :class:`Stream <Stream>` matching the given itag or None if
            not found.

        """
        ...
    def get_highest_resolution(self) -> Optional[Stream]:
        """Get highest resolution stream that is a progressive video.

        :rtype: :class:`Stream <Stream>` or None
        :returns:
            The :class:`Stream <Stream>` matching the given itag or None if
            not found.

        """
        ...
    def get_audio_only(self, subtype: str = ...) -> Optional[Stream]:
        """Get highest bitrate audio stream for given codec (defaults to mp4)

        :param str subtype:
            Audio subtype, defaults to mp4
        :rtype: :class:`Stream <Stream>` or None
        :returns:
            The :class:`Stream <Stream>` matching the given itag or None if
            not found.
        """
        ...
    def otf(self, is_otf: bool = ...) -> StreamQuery:
        """Filter stream by OTF, useful if some streams have 404 URLs

        :param bool is_otf: Set to False to retrieve only non-OTF streams
        :rtype: :class:`StreamQuery <StreamQuery>`
        :returns: A StreamQuery object with otf filtered streams
        """
        ...
    def first(self) -> Optional[Stream]:
        """Get the first :class:`Stream <Stream>` in the results.

        :rtype: :class:`Stream <Stream>` or None
        :returns:
            the first result of this query or None if the result doesn't
            contain any streams.

        """
        ...
    def last(self):  # -> None:
        """Get the last :class:`Stream <Stream>` in the results.

        :rtype: :class:`Stream <Stream>` or None
        :returns:
            Return the last result of this query or None if the result
            doesn't contain any streams.

        """
        ...
    @deprecated("Get the size of this list directly using len()")
    def count(self, value: Optional[str] = ...) -> int:
        """Get the count of items in the list.

        :rtype: int
        """
        ...
    @deprecated("This object can be treated as a list, all() is useless")
    def all(self) -> List[Stream]:
        """Get all the results represented by this query as a list.

        :rtype: list

        """
        ...
    def __getitem__(self, i: Union[slice, int]): ...
    def __len__(self) -> int: ...
    def __repr__(self) -> str: ...

class CaptionQuery(Mapping):
    """Interface for querying the available captions."""

    def __init__(self, captions: List[Caption]) -> None:
        """Construct a :class:`Caption <Caption>`.

        param list captions:
            list of :class:`Caption <Caption>` instances.

        """
        ...
    @deprecated("This object can be treated as a dictionary, i.e. captions['en']")
    def get_by_language_code(self, lang_code: str) -> Optional[Caption]:
        """Get the :class:`Caption <Caption>` for a given ``lang_code``.

        :param str lang_code:
            The code that identifies the caption language.
        :rtype: :class:`Caption <Caption>` or None
        :returns:
            The :class:`Caption <Caption>` matching the given ``lang_code`` or
            None if it does not exist.
        """
        ...
    @deprecated("This object can be treated as a dictionary")
    def all(self) -> List[Caption]:
        """Get all the results represented by this query as a list.

        :rtype: list

        """
        ...
    def __getitem__(self, i: str):  # -> Caption:
        ...
    def __len__(self) -> int: ...
    def __iter__(self):  # -> Iterator[Caption]:
        ...
    def __repr__(self) -> str: ...
