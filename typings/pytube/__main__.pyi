"""
This type stub file was generated by pyright.
"""

from typing import Any, Callable, Dict, List, Optional

import pytube
from pytube import StreamQuery
from pytube.metadata import YouTubeMetadata

"""
This module implements the core developer interface for pytube.

The problem domain of the :class:`YouTube <YouTube> class focuses almost
exclusively on the developer interface. Pytube offloads the heavy lifting to
smaller peripheral modules and functions.

"""
logger = ...

class YouTube:
    """Core developer interface for pytube."""

    def __init__(
        self,
        url: str,
        on_progress_callback: Optional[Callable[[Any, bytes, int], None]] = ...,
        on_complete_callback: Optional[Callable[[Any, Optional[str]], None]] = ...,
        proxies: Dict[str, str] = ...,
        use_oauth: bool = ...,
        allow_oauth_cache: bool = ...,
    ) -> None:
        """Construct a :class:`YouTube <YouTube>`.

        :param str url:
            A valid YouTube watch URL.
        :param func on_progress_callback:
            (Optional) User defined callback function for stream download
            progress events.
        :param func on_complete_callback:
            (Optional) User defined callback function for stream download
            complete events.
        :param dict proxies:
            (Optional) A dict mapping protocol to proxy address which will be used by pytube.
        :param bool use_oauth:
            (Optional) Prompt the user to authenticate to YouTube.
            If allow_oauth_cache is set to True, the user should only be prompted once.
        :param bool allow_oauth_cache:
            (Optional) Cache OAuth tokens locally on the machine. Defaults to True.
            These tokens are only generated if use_oauth is set to True as well.
        """
        ...
    def __repr__(self):  # -> str:
        ...
    def __eq__(self, o: object) -> bool: ...
    @property
    def watch_html(self):  # -> str | _UrlopenRet:
        ...
    @property
    def embed_html(self):  # -> str | _UrlopenRet:
        ...
    @property
    def age_restricted(self):  # -> bool:
        ...
    @property
    def js_url(self):  # -> str:
        ...
    @property
    def js(self):  # -> str | _UrlopenRet | None:
        ...
    @property
    def initial_data(self):  # -> str:
        ...
    @property
    def streaming_data(self):  # -> Any:
        """Return streamingData from video info."""
        ...
    @property
    def fmt_streams(self):  # -> List[Stream]:
        """Returns a list of streams if they have been initialized.

        If the streams have not been initialized, finds all relevant
        streams and initializes them.
        """
        ...
    def check_availability(self):  # -> None:
        """Check whether the video is available.

        Raises different exceptions based on why the video is unavailable,
        otherwise does nothing.
        """
        ...
    @property
    def vid_info(self):  # -> Dict[Unknown, Unknown] | Any:
        """Parse the raw vid info and return the parsed result.

        :rtype: Dict[Any, Any]
        """
        ...
    def bypass_age_gate(self):  # -> None:
        """Attempt to update the vid_info by bypassing the age gate."""
        ...
    @property
    def caption_tracks(self) -> List[pytube.Caption]:
        """Get a list of :class:`Caption <Caption>`.

        :rtype: List[Caption]
        """
        ...
    @property
    def captions(self) -> pytube.CaptionQuery:
        """Interface to query caption tracks.

        :rtype: :class:`CaptionQuery <CaptionQuery>`.
        """
        ...
    @property
    def streams(self) -> StreamQuery:
        """Interface to query both adaptive (DASH) and progressive streams.

        :rtype: :class:`StreamQuery <StreamQuery>`.
        """
        ...
    @property
    def thumbnail_url(self) -> str:
        """Get the thumbnail url image.

        :rtype: str
        """
        ...
    @property
    def publish_date(self):  # -> datetime | None:
        """Get the publish date.

        :rtype: datetime
        """
        ...
    @publish_date.setter
    def publish_date(self, value):  # -> None:
        """Sets the publish date."""
        ...
    @property
    def title(self) -> str:
        """Get the video title.

        :rtype: str
        """
        ...
    @title.setter
    def title(self, value):  # -> None:
        """Sets the title value."""
        ...
    @property
    def description(self) -> str:
        """Get the video description.

        :rtype: str
        """
        ...
    @property
    def rating(self) -> float:
        """Get the video average rating.

        :rtype: float

        """
        ...
    @property
    def length(self) -> int:
        """Get the video length in seconds.

        :rtype: int
        """
        ...
    @property
    def views(self) -> int:
        """Get the number of the times the video has been viewed.

        :rtype: int
        """
        ...
    @property
    def author(self) -> str:
        """Get the video author.
        :rtype: str
        """
        ...
    @author.setter
    def author(self, value):  # -> None:
        """Set the video author."""
        ...
    @property
    def keywords(self) -> List[str]:
        """Get the video keywords.

        :rtype: List[str]
        """
        ...
    @property
    def channel_id(self) -> str:
        """Get the video poster's channel id.

        :rtype: str
        """
        ...
    @property
    def channel_url(self) -> str:
        """Construct the channel url for the video's poster from the channel id.

        :rtype: str
        """
        ...
    @property
    def metadata(self) -> Optional[YouTubeMetadata]:
        """Get the metadata for the video.

        :rtype: YouTubeMetadata
        """
        ...
    def register_on_progress_callback(
        self, func: Callable[[Any, bytes, int], None]
    ):  # -> None:
        """Register a download progress callback function post initialization.

        :param callable func:
            A callback function that takes ``stream``, ``chunk``,
             and ``bytes_remaining`` as parameters.

        :rtype: None

        """
        ...
    def register_on_complete_callback(
        self, func: Callable[[Any, Optional[str]], None]
    ):  # -> None:
        """Register a download complete callback function post initialization.

        :param callable func:
            A callback function that takes ``stream`` and  ``file_path``.

        :rtype: None

        """
        ...
    @staticmethod
    def from_id(video_id: str) -> YouTube:
        """Construct a :class:`YouTube <YouTube>` object from a video id.

        :param str video_id:
            The video id of the YouTube video.

        :rtype: :class:`YouTube <YouTube>`

        """
        ...
