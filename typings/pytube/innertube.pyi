"""
This type stub file was generated by pyright.
"""

"""This module is designed to interact with the innertube API.

This module is NOT intended to be used directly by end users, as each of the
interfaces returns raw results. These should instead be parsed to extract
the useful information for the end user.
"""
_client_id = ...
_client_secret = ...
_api_keys = ...
_default_clients = ...
_token_timeout = ...
_cache_dir = ...
_token_file = ...

class InnerTube:
    """Object for interacting with the innertube API."""

    def __init__(self, client=..., use_oauth=..., allow_cache=...) -> None:
        """Initialize an InnerTube object.

        :param str client:
            Client to use for the object.
            Default to web because it returns the most playback types.
        :param bool use_oauth:
            Whether or not to authenticate to YouTube.
        :param bool allow_cache:
            Allows caching of oauth tokens on the machine.
        """
        ...
    def cache_tokens(self):  # -> None:
        """Cache tokens to file if allowed."""
        ...
    def refresh_bearer_token(self, force=...):  # -> None:
        """Refreshes the OAuth token if necessary.

        :param bool force:
            Force-refresh the bearer token.
        """
        ...
    def fetch_bearer_token(self):  # -> None:
        """Fetch an OAuth token."""
        ...
    @property
    def base_url(self):  # -> Literal['https://www.youtube.com/youtubei/v1']:
        """Return the base url endpoint for the innertube API."""
        ...
    @property
    def base_data(self):  # -> dict[str, Unknown]:
        """Return the base json data to transmit to the innertube API."""
        ...
    @property
    def base_params(self):  # -> dict[str, Unknown]:
        """Return the base query parameters to transmit to the innertube API."""
        ...
    def browse(self):  # -> None:
        """Make a request to the browse endpoint.

        TODO: Figure out how we can use this
        """
        ...
    def config(self):  # -> None:
        """Make a request to the config endpoint.

        TODO: Figure out how we can use this
        """
        ...
    def guide(self):  # -> None:
        """Make a request to the guide endpoint.

        TODO: Figure out how we can use this
        """
        ...
    def next(self):  # -> None:
        """Make a request to the next endpoint.

        TODO: Figure out how we can use this
        """
        ...
    def player(self, video_id):  # -> Any:
        """Make a request to the player endpoint.

        :param str video_id:
            The video id to get player info for.
        :rtype: dict
        :returns:
            Raw player info results.
        """
        ...
    def search(self, search_query, continuation=...):  # -> Any:
        """Make a request to the search endpoint.

        :param str search_query:
            The query to search.
        :rtype: dict
        :returns:
            Raw search query results.
        """
        ...
    def verify_age(self, video_id):  # -> Any:
        """Make a request to the age_verify endpoint.

        Notable examples of the types of video this verification step is for:
        * https://www.youtube.com/watch?v=QLdAhwSBZ3w
        * https://www.youtube.com/watch?v=hc0ZDaAZQT0

        :param str video_id:
            The video id to get player info for.
        :rtype: dict
        :returns:
            Returns information that includes a URL for bypassing certain restrictions.
        """
        ...
    def get_transcript(self, video_id):  # -> Any:
        """Make a request to the get_transcript endpoint.

        This is likely related to captioning for videos, but is currently untested.
        """
        ...
