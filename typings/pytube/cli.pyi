"""
This type stub file was generated by pyright.
"""

from typing import Optional

from pytube import Stream, YouTube

"""A simple command line application to download youtube videos."""
logger = ...

def main():  # -> None:
    """Command line application to download youtube videos."""
    ...

def build_playback_report(youtube: YouTube) -> None:
    """Serialize the request data to json for offline debugging.

    :param YouTube youtube:
        A YouTube object.
    """
    ...

def display_progress_bar(
    bytes_received: int, filesize: int, ch: str = ..., scale: float = ...
) -> None:
    """Display a simple, pretty progress bar.

    Example:
    ~~~~~~~~
    PSY - GANGNAM STYLE(강남스타일) MV.mp4
    ↳ |███████████████████████████████████████| 100.0%

    :param int bytes_received:
        The delta between the total file size (bytes) and bytes already
        written to disk.
    :param int filesize:
        File size of the media stream in bytes.
    :param str ch:
        Character to use for presenting progress segment.
    :param float scale:
        Scale multiplier to reduce progress bar size.

    """
    ...

def on_progress(stream: Stream, chunk: bytes, bytes_remaining: int) -> None: ...
def ffmpeg_process(
    youtube: YouTube, resolution: str, target: Optional[str] = ...
) -> None:
    """
    Decides the correct video stream to download, then calls _ffmpeg_downloader.

    :param YouTube youtube:
        A valid YouTube object.
    :param str resolution:
        YouTube video resolution.
    :param str target:
        Target directory for download
    """
    ...

def download_by_itag(youtube: YouTube, itag: int, target: Optional[str] = ...) -> None:
    """Start downloading a YouTube video.

    :param YouTube youtube:
        A valid YouTube object.
    :param int itag:
        YouTube format identifier code.
    :param str target:
        Target directory for download
    """
    ...

def download_by_resolution(
    youtube: YouTube, resolution: str, target: Optional[str] = ...
) -> None:
    """Start downloading a YouTube video.

    :param YouTube youtube:
        A valid YouTube object.
    :param str resolution:
        YouTube video resolution.
    :param str target:
        Target directory for download
    """
    ...

def download_highest_resolution_progressive(
    youtube: YouTube, resolution: str, target: Optional[str] = ...
) -> None:
    """Start downloading the highest resolution progressive stream.

    :param YouTube youtube:
        A valid YouTube object.
    :param str resolution:
        YouTube video resolution.
    :param str target:
        Target directory for download
    """
    ...

def display_streams(youtube: YouTube) -> None:
    """Probe YouTube video and lists its available formats.

    :param YouTube youtube:
        A valid YouTube watch URL.

    """
    ...

def download_caption(
    youtube: YouTube, lang_code: Optional[str], target: Optional[str] = ...
) -> None:
    """Download a caption for the YouTube video.

    :param YouTube youtube:
        A valid YouTube object.
    :param str lang_code:
        Language code desired for caption file.
        Prints available codes if the value is None
        or the desired code is not available.
    :param str target:
        Target directory for download
    """
    ...

def download_audio(
    youtube: YouTube, filetype: str, target: Optional[str] = ...
) -> None:
    """
    Given a filetype, downloads the highest quality available audio stream for a
    YouTube video.

    :param YouTube youtube:
        A valid YouTube object.
    :param str filetype:
        Desired file format to download.
    :param str target:
        Target directory for download
    """
    ...

if __name__ == "__main__": ...
