"""
This type stub file was generated by pyright.
"""

from typing import Pattern, Union

"""Library specific exception definitions."""

class PytubeError(Exception):
    """Base pytube exception that all others inherit.

    This is done to not pollute the built-in exceptions, which *could* result
    in unintended errors being unexpectedly and incorrectly handled within
    implementers code.
    """

    ...

class MaxRetriesExceeded(PytubeError):
    """Maximum number of retries exceeded."""

    ...

class HTMLParseError(PytubeError):
    """HTML could not be parsed"""

    ...

class ExtractError(PytubeError):
    """Data extraction based exception."""

    ...

class RegexMatchError(ExtractError):
    """Regex pattern did not return any matches."""

    def __init__(self, caller: str, pattern: Union[str, Pattern]) -> None:
        """
        :param str caller:
            Calling function
        :param str pattern:
            Pattern that failed to match
        """
        ...

class VideoUnavailable(PytubeError):
    """Base video unavailable error."""

    def __init__(self, video_id: str) -> None:
        """
        :param str video_id:
            A YouTube video identifier.
        """
        ...
    @property
    def error_string(self):  # -> str:
        ...

class AgeRestrictedError(VideoUnavailable):
    """Video is age restricted, and cannot be accessed without OAuth."""

    def __init__(self, video_id: str) -> None:
        """
        :param str video_id:
            A YouTube video identifier.
        """
        ...
    @property
    def error_string(self):  # -> str:
        ...

class LiveStreamError(VideoUnavailable):
    """Video is a live stream."""

    def __init__(self, video_id: str) -> None:
        """
        :param str video_id:
            A YouTube video identifier.
        """
        ...
    @property
    def error_string(self):  # -> str:
        ...

class VideoPrivate(VideoUnavailable):
    def __init__(self, video_id: str) -> None:
        """
        :param str video_id:
            A YouTube video identifier.
        """
        ...
    @property
    def error_string(self):  # -> str:
        ...

class RecordingUnavailable(VideoUnavailable):
    def __init__(self, video_id: str) -> None:
        """
        :param str video_id:
            A YouTube video identifier.
        """
        ...
    @property
    def error_string(self):  # -> str:
        ...

class MembersOnly(VideoUnavailable):
    """Video is members-only.

    YouTube has special videos that are only viewable to users who have
    subscribed to a content creator.
    ref: https://support.google.com/youtube/answer/7544492?hl=en
    """

    def __init__(self, video_id: str) -> None:
        """
        :param str video_id:
            A YouTube video identifier.
        """
        ...
    @property
    def error_string(self):  # -> str:
        ...

class VideoRegionBlocked(VideoUnavailable):
    def __init__(self, video_id: str) -> None:
        """
        :param str video_id:
            A YouTube video identifier.
        """
        ...
    @property
    def error_string(self):  # -> str:
        ...
