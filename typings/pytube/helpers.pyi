"""
This type stub file was generated by pyright.
"""

from typing import Any, Callable, Dict, List, Optional, TypeVar

"""Various helper functions implemented by pytube."""
logger = ...
class DeferredGeneratorList:
    """A wrapper class for deferring list generation.

    Pytube has some continuation generators that create web calls, which means
    that any time a full list is requested, all of those web calls must be
    made at once, which could lead to slowdowns. This will allow individual
    elements to be queried, so that slowdowns only happen as necessary. For
    example, you can iterate over elements in the list without accessing them
    all simultaneously. This should allow for speed improvements for playlist
    and channel interactions.
    """
    def __init__(self, generator) -> None:
        """Construct a :class:`DeferredGeneratorList <DeferredGeneratorList>`.

        :param generator generator:
            The deferrable generator to create a wrapper for.
        :param func func:
            (Optional) A function to call on the generator items to produce the list.
        """
        ...
    
    def __eq__(self, other) -> bool:
        """We want to mimic list behavior for comparison."""
        ...
    
    def __getitem__(self, key) -> Any:
        """Only generate items as they're asked for."""
        ...
    
    def __iter__(self): # -> Generator[Any, Any, None]:
        """Custom iterator for dynamically generated list."""
        ...
    
    def __next__(self) -> Any:
        """Fetch next element in iterator."""
        ...
    
    def __len__(self) -> int:
        """Return length of list of all items."""
        ...
    
    def __repr__(self) -> str:
        """String representation of all items."""
        ...
    
    def __reversed__(self): # -> list[Unknown]:
        ...
    
    def generate_all(self): # -> None:
        """Generate all items."""
        ...
    


def regex_search(pattern: str, string: str, group: int) -> str:
    """Shortcut method to search a string for a given pattern.

    :param str pattern:
        A regular expression pattern.
    :param str string:
        A target string to search.
    :param int group:
        Index of group to return.
    :rtype:
        str or tuple
    :returns:
        Substring pattern matches.
    """
    ...

def safe_filename(s: str, max_length: int = ...) -> str:
    """Sanitize a string making it safe to use as a filename.

    This function was based off the limitations outlined here:
    https://en.wikipedia.org/wiki/Filename.

    :param str s:
        A string to make safe for use as a file name.
    :param int max_length:
        The maximum filename character length.
    :rtype: str
    :returns:
        A sanitized string.
    """
    ...

def setup_logger(level: int = ..., log_filename: Optional[str] = ...) -> None:
    """Create a configured instance of logger.

    :param int level:
        Describe the severity level of the logs to handle.
    """
    ...

GenericType = TypeVar("GenericType")
def cache(func: Callable[..., GenericType]) -> GenericType:
    """ mypy compatible annotation wrapper for lru_cache"""
    ...

def deprecated(reason: str) -> Callable:
    """
    This is a decorator which can be used to mark functions
    as deprecated. It will result in a warning being emitted
    when the function is used.
    """
    ...

def target_directory(output_path: Optional[str] = ...) -> str:
    """
    Function for determining target directory of a download.
    Returns an absolute path (if relative one given) or the current
    path (if none given). Makes directory if it does not exist.

    :type output_path: str
        :rtype: str
    :returns:
        An absolute directory path as a string.
    """
    ...

def install_proxy(proxy_handler: Dict[str, str]) -> None:
    ...

def uniqueify(duped_list: List) -> List:
    """Remove duplicate items from a list, while maintaining list order.

    :param List duped_list
        List to remove duplicates from

    :return List result
        De-duplicated list
    """
    ...

def generate_all_html_json_mocks(): # -> None:
    """Regenerate the video mock json files for all current test videos.

    This should automatically output to the test/mocks directory.
    """
    ...

def create_mock_html_json(vid_id) -> Dict[str, Any]:
    """Generate a json.gz file with sample html responses.

    :param str vid_id
        YouTube video id

    :return dict data
        Dict used to generate the json.gz file
    """
    ...

