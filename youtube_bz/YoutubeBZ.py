from __future__ import unicode_literals

import html
import time
import youtube_dl
import re

from .api import YoutubeAPI, MusicBrainzAPI
from .album import Album

from difflib import SequenceMatcher

class YoutubeBZ:

    def search_albums(self, artist, album):
        data = MusicBrainzAPI().search('artist', artist, 1)
        print('{:17s} {}'.format('', data['artists'][0]['name']))
        data = MusicBrainzAPI().search('release', '{} AND arid:{}'.format(album, data['artists'][0]['id']), 25)

        releases = []
        for item in data['releases']:
            if any (d['title'] == item['title'] and d['track-count'] == item['track-count'] for d in releases):
                pass
            else:
                releases.append({'title' : item['title'], 'id' : item['id'], 'track-count' : item['track-count']})

        print('{:3s} {:50s} {:2s}'.format('', 'Title', 'Track Count'))
        i = 0
        for track in releases:
            print('{:2d}) {:50s} {:2d}'.format(i, track['title'], int(track['track-count'])))
            i = i + 1

        i = int(input('Select one: '))

        return releases[i]['id']
    
    def find_ids(self, mbid: str)-> int:

        counts = 0
        myAlbum = Album(mbid)
        
        with open("{}.txt".format(myAlbum.title), "w") as f:
            for track in myAlbum.tracks:
                query = '+"{}" +"{}" +"{}" +"{}"'.format(
                    myAlbum.artist, myAlbum.title, 
                    track, "Auto-generated by YouTube."
                )
                response = YoutubeAPI().search(query)
                
                if 'error' in response:
                    print(response['error']['message'])
                    return 0

                i = 0
                for item in response['items']:
                    video_title = html.unescape(item['snippet']['title'])
                    video_id = item['id']['videoId']
                    
                    video_title = re.sub(r'\([^\)]+\)', '', video_title)
                    track = re.sub(r'\([^\)]+\)', '', track)

                    regex_artist = re.search(r'(.*)\ -\ (.*)', video_title)
                    if regex_artist != None:
                        video_title = regex_artist.group(2)

                    ratio = SequenceMatcher(None, track.upper(), video_title.upper()).ratio() 
                    if ratio > 0.8:
                        print('{} [\033[32mOK\033[0m]'.format(video_title))
                        f.write("https://www.youtube.com/watch?v={}\n".format(video_id))
                        counts = counts + 1
                        break
                    else:
                        i = i + 1
                        if i == len(response['items']):
                            print('{} [\033[33mFail\033[0m]'.format(track))
                
                if len(response['items']) == 0:
                    print('{} [\033[33mFail\033[0m]'.format(track))

        return counts
