import html
import time
import re

from .api import YoutubeAPI, MusicBrainzAPI
from .album import Album

from difflib import SequenceMatcher

class YoutubeBZ:

    def search_albums(self):
        data = MusicBrainzAPI().search('artist', input('Artist: '), 3)
        i = 1
        for artist in data['artists']:
            print('{:1d}) {}'.format(i, artist['name']))
            i = i+1
        
        i = int(input('Select one: ')) - 1
        answer = input('Album: ')
        data = MusicBrainzAPI().search('release', '{} AND arid:{}'.format(answer, data['artists'][i]['id']), 25)

        releases = {}
        i = 1
        print('{:3s} {:50s} {:2s}'.format('', 'Title', 'Track Count'))
        for release in data['releases']:
            print('{:2d}) {:50s} {:2d}'.format(i, release['title'], int(release['track-count'])))
            i = i+1
        i = int(input('Select one: ')) -1

        return data['releases'][i]['id']
    
    def find_ids(self, mbid: str)-> int:

        counts = 0
        myAlbum = Album(mbid)
        
        with open("{}.txt".format(myAlbum.title), "w") as f:
            for track in myAlbum.tracks:
                query = '+"{}" +"{}" +"{}" +"{}"'.format(
                    myAlbum.artist, myAlbum.title, 
                    track, "Auto-generated by YouTube."
                )
                response = YoutubeAPI().search(query)
                
                if 'error' in response:
                    print(response['error']['message'])
                    return 0

                video_title = html.unescape(response['items'][0]['snippet']['title'])
                video_id = response['items'][0]['id']['videoId']
                
                video_title = re.sub(r'\([^\)]+\)', '', video_title)
                track = re.sub(r'\([^\)]+\)', '', track)

                ratio = SequenceMatcher(None, track.upper(), video_title.upper()).ratio() 
                if ratio > 0.9:
                    print('{} [\033[32mOK\033[0m]'.format(video_title))
                    f.write("https://www.youtube.com/watch?v={}\n".format(video_id))
                    counts = counts + 1
                else:
                    print('{} [\033[33mFailed\033[0m]'.format(track))

                time.sleep(0.75)

        return counts
